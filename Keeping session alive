import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.functions._
import org.apache.spark.sql.DataFrame

def findSecondHighestColumn(df: DataFrame): DataFrame = {
  // Create an array of struct (column_name, value) and then explode it
  val dfLong = df.withColumn(
    "col_values",
    explode(array(
      struct(lit("count_2") as "column_name", $"count_2" as "value"),
      struct(lit("count_3") as "column_name", $"count_3" as "value"),
      struct(lit("count_4") as "column_name", $"count_4" as "value")
    ))
  ).select($"*", $"col_values.column_name", $"col_values.value")

  // Define a window partitioned by original row identifiers and ordered by value
  val windowSpec = Window.partitionBy("id").orderBy($"value".desc) // Replace "id" with your row identifier

  // Rank the values and filter for rank 2
  val dfRanked = dfLong.withColumn("rank", rank().over(windowSpec))
                      .filter($"rank" === 2)

  // Join back with the original DataFrame to get the column name of the second highest value
  val result = df.join(dfRanked, Seq("id"), "left") // Replace "id" with your row identifier
                 .select(df.columns.map(df(_)) :+ dfRanked("column_name"): _*)

  result
}

// Usage
val updatedDf = findSecondHighestColumn(yourDataFrame)


========================================
Subject: Introducing New Authentication Utility for Simplified Token Generation

Hi Team,

I hope this email finds you well.

I am excited to announce the rollout of a new utility that we have developed to streamline our authentication process. This tool is specifically designed to dynamically generate unique authentication tokens, greatly simplifying the process for our application teams.

Key Features and Benefits:

Dynamic Token Generation: The utility automatically creates unique auth tokens, ensuring secure and streamlined access for users.
Ease of Use for Application Teams: With this tool, application teams can seamlessly create Kerberos tokens without the need for intricate coding or manual intervention. This simplifies the authentication process significantly.
Centralized Updates: In the future, should there be any need for changes or updates in the authentication process, these can be implemented directly in this utility. This means we will only need to modify this single script, rather than making widespread changes across multiple applications.
Reduced Burden: By centralizing this function, we significantly reduce the workload on our application teams, allowing them to focus more on core development tasks.
Next Steps:

Integration: We encourage all application teams to start integrating this utility into their systems.
Feedback: Your feedback is crucial. Please share your experiences and suggestions to help us improve the utility further.
Support: For any questions or assistance in integrating this utility, please do not hesitate to contact [Support Contact Information].
We believe this utility marks a significant step towards enhancing our operational efficiency and security. Your cooperation and proactive involvement in integrating and utilizing this new tool are highly appreciated.

Thank you for your continued support and collaboration.

Best regards,
