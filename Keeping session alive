# ============================================================================
# ADD THESE TWO FUNCTIONS TO YOUR EXISTING SHAPAnomalyExplainer CLASS
# ============================================================================

def _get_html_template(self):
    """Return HTML template as embedded string."""
    return '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LSTM Anomaly Detection Report</title>
    <script src="https://cdn.plot.ly/plotly-2.18.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #667eea;
            --critical-color: #ff4444;
            --high-color: #ffaa00;
            --medium-color: #ffdd00;
            --low-color: #4444ff;
            --text-color: #333;
            --bg-color: #f8f9fa;
            --border-color: #dee2e6;
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            background: linear-gradient(135deg, var(--primary-color) 0%, #764ba2 100%);
            padding: 20px;
            color: var(--text-color);
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, var(--primary-color) 0%, #764ba2 100%);
            color: white;
            padding: 30px 40px;
            text-align: center;
        }
        .header h1 { font-size: 2.5rem; margin-bottom: 10px; font-weight: 700; }
        .header p { font-size: 1rem; opacity: 0.9; }
        .metrics-container { padding: 30px; background: var(--bg-color); }
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }
        .metric-card {
            background: linear-gradient(135deg, var(--primary-color) 0%, #764ba2 100%);
            padding: 25px;
            border-radius: 10px;
            color: white;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        .metric-card:hover { transform: translateY(-5px); }
        .metric-value { font-size: 2.5rem; font-weight: bold; margin-bottom: 5px; }
        .metric-label { font-size: 0.9rem; opacity: 0.9; text-transform: uppercase; letter-spacing: 1px; }
        .metric-card.critical { background: linear-gradient(135deg, var(--critical-color) 0%, #cc0000 100%); }
        .metric-card.high { background: linear-gradient(135deg, var(--high-color) 0%, #ff8800 100%); }
        .metric-card.medium { background: linear-gradient(135deg, var(--medium-color) 0%, #ffcc00 100%); color: #333; }
        .tab-container { background: var(--bg-color); border-bottom: 2px solid var(--border-color); }
        .tabs { display: flex; list-style: none; overflow-x: auto; padding: 0 20px; }
        .tabs li { flex-shrink: 0; }
        .tab-link {
            display: block;
            padding: 18px 30px;
            color: #6c757d;
            text-decoration: none;
            font-weight: 500;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
            cursor: pointer;
            white-space: nowrap;
        }
        .tab-link:hover { color: var(--primary-color); background: rgba(102, 126, 234, 0.05); }
        .tab-link.active { color: var(--primary-color); border-bottom-color: var(--primary-color); background: white; }
        .tab-content { display: none; padding: 40px; animation: fadeIn 0.3s ease-in; }
        .tab-content.active { display: block; }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--border-color);
        }
        .chart-container {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        .table-container {
            overflow-x: auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        .data-table { width: 100%; border-collapse: collapse; font-size: 0.9rem; }
        .data-table thead tr {
            background: linear-gradient(135deg, var(--primary-color) 0%, #764ba2 100%);
            color: white;
            text-align: left;
            font-weight: 600;
        }
        .data-table th, .data-table td { padding: 14px 16px; }
        .data-table tbody tr { border-bottom: 1px solid #f0f0f0; transition: background 0.2s ease; }
        .data-table tbody tr:hover { background: var(--bg-color); }
        .badge-critical, .badge-warning, .badge-unknown {
            padding: 5px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85rem;
            text-transform: uppercase;
            color: white;
        }
        .badge-critical { background: var(--critical-color); }
        .badge-warning { background: var(--high-color); }
        .badge-unknown { background: var(--low-color); }
        .explanation-card {
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            border-left: 4px solid;
        }
        .explanation-card.critical { background: #fff5f5; border-left-color: var(--critical-color); }
        .explanation-card.warning { background: #fff9f0; border-left-color: var(--high-color); }
        .explanation-card h4 { margin-bottom: 10px; color: #2c3e50; }
        @media (max-width: 768px) {
            .header h1 { font-size: 1.8rem; }
            .metrics-grid { grid-template-columns: 1fr; }
            .tab-content { padding: 20px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-chart-line"></i> LSTM Anomaly Detection Report</h1>
            <p>Generated: {{GENERATION_DATE}}</p>
            <p>Analysis Period: {{ANALYSIS_PERIOD}}</p>
        </div>
        <div class="metrics-container">{{METRICS_HTML}}</div>
        <div class="tab-container">
            <ul class="tabs">
                <li><a class="tab-link active" onclick="openTab(event, 'tab1')"><i class="fas fa-home"></i> Overview</a></li>
                <li><a class="tab-link" onclick="openTab(event, 'tab2')"><i class="fas fa-exclamation-triangle"></i> Anomaly Details</a></li>
                <li><a class="tab-link" onclick="openTab(event, 'tab3')"><i class="fas fa-comment-dots"></i> Business Explanations</a></li>
                <li><a class="tab-link" onclick="openTab(event, 'tab4')"><i class="fas fa-project-diagram"></i> Feature Contributions</a></li>
                <li><a class="tab-link" onclick="openTab(event, 'tab5')"><i class="fas fa-database"></i> Baseline Statistics</a></li>
            </ul>
        </div>
        <div style="background: white;">
            <div id="tab1" class="tab-content active">
                <h2 class="section-title">Executive Summary</h2>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
                    <div class="chart-container">
                        <h3 style="color: #495057; margin-bottom: 15px;">Severity Distribution</h3>
                        <div id="chart1"></div>
                    </div>
                    <div class="chart-container">
                        <h3 style="color: #495057; margin-bottom: 15px;">Top Anomalous Features</h3>
                        <div id="chart2"></div>
                    </div>
                </div>
                <div class="chart-container">
                    <h3 style="color: #495057; margin-bottom: 15px;">Key Insights</h3>
                    {{KEY_INSIGHTS_HTML}}
                </div>
            </div>
            <div id="tab2" class="tab-content">
                <h2 class="section-title">Detected Anomalies</h2>
                <div class="table-container">{{ANOMALY_TABLE}}</div>
            </div>
            <div id="tab3" class="tab-content">
                <h2 class="section-title">Business-Friendly Explanations</h2>
                {{EXPLANATIONS_HTML}}
            </div>
            <div id="tab4" class="tab-content">
                <h2 class="section-title">SHAP Feature Contributions</h2>
                <div class="table-container">{{SHAP_TABLE}}</div>
                <div class="chart-container" style="margin-top: 30px;">
                    <h3 style="color: #495057; margin-bottom: 15px;">SHAP Value Distribution</h3>
                    <div id="chart3"></div>
                </div>
            </div>
            <div id="tab5" class="tab-content">
                <h2 class="section-title">Historical Baseline Statistics</h2>
                <div class="table-container">{{BASELINE_TABLE}}</div>
            </div>
        </div>
    </div>
    <script>
        function openTab(evt, tabId) {
            const tabContents = document.getElementsByClassName('tab-content');
            for (let i = 0; i < tabContents.length; i++) {
                tabContents[i].classList.remove('active');
            }
            const tabLinks = document.getElementsByClassName('tab-link');
            for (let i = 0; i < tabLinks.length; i++) {
                tabLinks[i].classList.remove('active');
            }
            document.getElementById(tabId).classList.add('active');
            evt.currentTarget.classList.add('active');
        }
        {{CHART_RENDERING_SCRIPTS}}
    </script>
</body>
</html>'''

def _generate_html_report(self, summary_df, anomalies_df, feature_contrib_df, 
                          feature_ranking, output_dir):
    """Generate interactive HTML report."""
    from pathlib import Path
    
    print("\nGenerating interactive HTML report...")
    html_template = self._get_html_template()
    
    # Extract metrics
    metrics = {}
    if summary_df is not None:
        for _, row in summary_df.iterrows():
            metrics[row['Metric']] = row['Value']
    
    # Metrics cards HTML
    metrics_html = f"""
    <div class="metrics-grid">
        <div class="metric-card">
            <div class="metric-value">{metrics.get('Total Anomalies Detected', 0)}</div>
            <div class="metric-label">Total Anomalies</div>
        </div>
        <div class="metric-card critical">
            <div class="metric-value">{metrics.get('Critical Anomalies', 0)}</div>
            <div class="metric-label">Critical</div>
        </div>
        <div class="metric-card high">
            <div class="metric-value">{metrics.get('High Anomalies', 0)}</div>
            <div class="metric-label">High Severity</div>
        </div>
        <div class="metric-card medium">
            <div class="metric-value">{metrics.get('Low Anomalies', 0)}</div>
            <div class="metric-label">Low Severity</div>
        </div>
    </div>
    """
    
    # Anomaly table
    anomaly_table_html = "<table class='data-table'><thead><tr>"
    if anomalies_df is not None and len(anomalies_df) > 0:
        for col in ['pipeline_id', 'Timestamp', 'Feature_Name', 'Severity', 
                   'Raw_Value', 'Expected_Value', 'Z-Score']:
            if col in anomalies_df.columns:
                anomaly_table_html += f"<th>{col.replace('_', ' ').title()}</th>"
        anomaly_table_html += "</tr></thead><tbody>"
        
        for _, row in anomalies_df.head(100).iterrows():
            anomaly_table_html += "<tr>"
            for col in ['pipeline_id', 'Timestamp', 'Feature_Name', 'Severity', 
                       'Raw_Value', 'Expected_Value', 'Z-Score']:
                if col in anomalies_df.columns:
                    val = row[col]
                    if col == 'Severity':
                        badge_class = f"badge-{val.lower()}" if isinstance(val, str) else "badge-unknown"
                        anomaly_table_html += f"<td><span class='{badge_class}'>{val}</span></td>"
                    elif col in ['Raw_Value', 'Expected_Value', 'Z-Score']:
                        anomaly_table_html += f"<td>{val:.2f}</td>"
                    else:
                        anomaly_table_html += f"<td>{val}</td>"
            anomaly_table_html += "</tr>"
        anomaly_table_html += "</tbody></table>"
    
    # SHAP table
    shap_table_html = "<table class='data-table'><thead><tr>"
    if feature_contrib_df is not None and len(feature_contrib_df) > 0:
        for col in ['pipeline_id', 'Feature_Name', 'Raw_Value', 'Normal_Range', 
                   'Contribution_Score', 'Z-Score']:
            if col in feature_contrib_df.columns:
                shap_table_html += f"<th>{col.replace('_', ' ').title()}</th>"
        shap_table_html += "</tr></thead><tbody>"
        
        for _, row in feature_contrib_df.head(100).iterrows():
            shap_table_html += "<tr>"
            for col in ['pipeline_id', 'Feature_Name', 'Raw_Value', 'Normal_Range', 
                       'Contribution_Score', 'Z-Score']:
                if col in feature_contrib_df.columns:
                    val = row[col]
                    if col in ['Raw_Value', 'Contribution_Score', 'Z-Score']:
                        shap_table_html += f"<td>{val:.4f}</td>"
                    else:
                        shap_table_html += f"<td>{val}</td>"
            shap_table_html += "</tr>"
        shap_table_html += "</tbody></table>"
    
    # Baseline table
    baseline_table_html = "<table class='data-table'><thead><tr>"
    baseline_table_html += "<th>Feature</th><th>Mean SHAP</th><th>DQ Dimension</th></tr></thead><tbody>"
    if feature_ranking is not None:
        for _, row in feature_ranking.head(20).iterrows():
            baseline_table_html += f"<tr><td>{row['feature']}</td>"
            baseline_table_html += f"<td>{row['mean_abs_shap']:.4f}</td>"
            baseline_table_html += f"<td>{row.get('dq_dimension', 'Unknown')}</td></tr>"
    baseline_table_html += "</tbody></table>"
    
    # Business explanations
    explanations_html = ""
    if anomalies_df is not None and 'Description' in anomalies_df.columns:
        unique_descs = anomalies_df.groupby(['Feature_Name', 'Severity', 'Description']).size().reset_index()
        for _, row in unique_descs.head(10).iterrows():
            severity = row['Severity'].lower() if isinstance(row['Severity'], str) else 'unknown'
            explanations_html += f"""
            <div class="explanation-card {severity}">
                <h4>{row['Feature_Name']}</h4>
                <p>{row['Description']}</p>
            </div>
            """
    
    # Key insights
    key_insights_html = "<ul style='line-height: 2;'>"
    if anomalies_df is not None:
        top_features = anomalies_df['Feature_Name'].value_counts().head(3)
        for feat, count in top_features.items():
            key_insights_html += f"<li><strong>{feat}</strong>: {count} anomalies detected</li>"
    key_insights_html += "</ul>"
    
    # Plotly charts
    charts_script = ""
    
    # Chart 1: Severity pie
    if anomalies_df is not None and 'Severity' in anomalies_df.columns:
        severity_counts = anomalies_df['Severity'].value_counts()
        charts_script += f"""
        Plotly.newPlot('chart1', [{{
            type: 'pie',
            labels: {severity_counts.index.tolist()},
            values: {severity_counts.values.tolist()},
            marker: {{ colors: ['#ff4444', '#ffaa00', '#4444ff'] }}
        }}], {{height: 300}});
        """
    
    # Chart 2: Top features bar
    if feature_ranking is not None:
        top_features = feature_ranking.head(10)
        charts_script += f"""
        Plotly.newPlot('chart2', [{{
            type: 'bar',
            x: {top_features['mean_abs_shap'].tolist()},
            y: {top_features['feature'].tolist()},
            orientation: 'h',
            marker: {{ color: '#667eea' }}
        }}], {{height: 400, yaxis: {{autorange: 'reversed'}}}});
        """
    
    # Chart 3: SHAP histogram
    if feature_contrib_df is not None and 'Contribution_Score' in feature_contrib_df.columns:
        charts_script += f"""
        Plotly.newPlot('chart3', [{{
            type: 'histogram',
            x: {feature_contrib_df['Contribution_Score'].tolist()},
            marker: {{ color: '#667eea' }}
        }}], {{height: 300}});
        """
    
    # Replace placeholders
    html_content = html_template.replace('{{GENERATION_DATE}}', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    html_content = html_content.replace('{{ANALYSIS_PERIOD}}', str(metrics.get('Date Range', 'N/A')))
    html_content = html_content.replace('{{METRICS_HTML}}', metrics_html)
    html_content = html_content.replace('{{ANOMALY_TABLE}}', anomaly_table_html)
    html_content = html_content.replace('{{SHAP_TABLE}}', shap_table_html)
    html_content = html_content.replace('{{BASELINE_TABLE}}', baseline_table_html)
    html_content = html_content.replace('{{EXPLANATIONS_HTML}}', explanations_html)
    html_content = html_content.replace('{{KEY_INSIGHTS_HTML}}', key_insights_html)
    html_content = html_content.replace('{{CHART_RENDERING_SCRIPTS}}', charts_script)
    
    # Save
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    html_path = Path(output_dir) / f'shap_analysis_{timestamp}.html'
    with open(html_path, 'w') as f:
        f.write(html_content)
    
    print(f"  HTML report generated: {html_path}")
    return html_path


# ============================================================================
# MODIFICATION TO generate_full_report()
# Add this AFTER excel_path = self._export_direct_to_excel_v2(...)
# ============================================================================

# Generate HTML report
html_path = self._generate_html_report(
    summary_df=summary_df,
    anomalies_df=anomalies_df,
    feature_contrib_df=feature_contrib_df,
    feature_ranking=feature_ranking,
    output_dir=output_path
)

# Update return statement
return {'excel_report': excel_path, 'html_report': html_path}
