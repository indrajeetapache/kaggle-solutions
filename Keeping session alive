# Create a regular expression for case-insensitive matching of job_status
regex_job_status = re.compile('^Success$', re.IGNORECASE)

# Create regular expressions for case-insensitive matching of job types
job_types = ["ingestion", "std", "ReconProfile"]
regex_job_types = [re.compile(f'^{job_type}$', re.IGNORECASE) for job_type in job_types]

# Define the query using regular expressions
query = {
    "job_status": regex_job_status,
    "job_type": {"$in": regex_job_types},
    "some_timestamp_field": {"$gte": int(insert_timestamp)}
}
# Perform the query using the conditions
results = main_collection.find(query)
======

# Access the 'recon_profile_collection'
recon_profile_collection = db["recon_profile_collection"]

# Fetch the most recent timestamp
latest_entry = recon_profile_collection.find_one({}, sort=[("insert_timestamp", -1)])
insert_timestamp = latest_entry['insert_timestamp']['$date']['$numberLong']
====

import json

# Path to your JSON file
file_path = 'your_data.json'

data = []
with open(file_path, 'r') as file:
    for line in file:
        data.append(json.loads(line))  # Load each line as a separate JSON object

print(data)


=====

# Convert all values in search_criteria to lowercase
search_criteria_lower = [{k: v.lower() for k, v in criteria.items()} for criteria in search_criteria]

# Filter the list of dictionaries based on the presence of any of the search criteria
filtered_data = [d for d in data if any(all(d.get(key, '').lower() == value for key, value in criteria.items()) for criteria in search_criteria_lower)]
===============

import pandas as pd
import json

# Path to your JSON file
file_path = 'your_data.json'

# Load the JSON data into a Python list of dictionaries
with open(file_path, 'r') as file:
    data = json.load(file)  # This loads the whole JSON array into a list of dictionaries

# Define the dictionary containing keys and values to search for
search_dict = {
    'key1': 'value1',
    'key2': 'value2',
    # Add more key-value pairs as needed
}

# Convert values in the search dictionary to lowercase for case-insensitive comparison
search_dict_lower = {k: v.lower() for k, v in search_dict.items()}

# Filter the list of dictionaries based on the values in the nested dictionary
filtered_data = [d for d in data if isinstance(d.get('other_keys'), dict) and all(d.get('other_keys').get(key, '').lower() == value for key, value in search_dict_lower.items())]

# Filter the remaining dictionaries based on the keys and values in the main dictionary
filtered_data = [d for d in filtered_data if all(d.get(key, '').lower() == value for key, value in search_dict_lower.items())]

# Create a DataFrame from the filtered list of dictionaries
df = pd.DataFrame(filtered_data)

# Display the DataFrame
print(df)
====

jobdetails_Collection_Filtered_dict = [d for d in jobdetails_Collection_Filtered_dict if isinstance(d.get('other_keys'), dict) and all(d.get('other_keys').get(key, "").lower() == value for key, value in collection_child_Search_criteria)]
========

import pandas as pd

# Assuming your list of dictionaries is stored in jobdetails_Collection_Filtered_dict

# Define the search criteria
search_criteria = {
    'databaseName': 'your_database_name',
    'TableName': 'your_table_name',
    'job_status': 'Success',
    'exec_env': 'your_exec_env'
}

# Filter the list of dictionaries based on the search criteria
filtered_data = [d for d in jobdetails_Collection_Filtered_dict if all(d.get(key) == value for key, value in search_criteria.items())]

# Create a DataFrame from the filtered list of dictionaries
df = pd.DataFrame(filtered_data)

# Display the DataFrame
print(df)
=======

import pandas as pd

# Assuming your list of dictionaries is stored in jobdetails_Collection_Filtered_dict

# Define the search criteria, directly including paths for nested dictionaries
search_criteria = {
    'other_keys.databaseName': 'your_database_name',
    'other_keys.TableName': 'your_table_name',
    'job_status': 'Success',
    'exec_env': 'PROD'
}

# Filter the list of dictionaries based on the search criteria
filtered_data = [d for d in jobdetails_Collection_Filtered_dict if all(
    d.get(key.split('.')[0]).get(key.split('.')[1], {}) == value if '.' in key else d.get(key) == value
    for key, value in search_criteria.items())]

# Create a DataFrame from the filtered list of dictionaries
df = pd.DataFrame(filtered_data)

# Display the DataFrame
print(df)
====

f1['audit_run_id'] = df1['other_keys'].apply(lambda x: x.get('audit_run_id', None))
df1['tgt_record_count'] = df1['other_keys'].apply(lambda x: x.get('tgt_record_count', None))

# Do the same for df2
df2['audit_run_id'] = df2['other_keys'].apply(lambda x: x.get('audit_run_id', None))
df2['tgt_record_count'] = df2['other_keys'].apply(lambda x: x.get('tgt_record_count', None))

# Merge DataFrames based on 'audit_run_id'
merged_df = pd.merge(df1, df2, on='audit_run_id', suffixes=('_df1', '_df2'))

# Display the merged DataFrame
print(merged_df)
# Check if 'tgt_record_count' matches between the two DataFrames
merged_df['tgt_record_count_match'] = merged_df['tgt_record_count_df1'] == merged_df['tgt_record_count_df2']

# Display the result
print(merged_df[['audit_run_id', 'tgt_record_count_df1', 'tgt_record_count_df2', 'tgt_record_count_match']])
====================
def get_nested_value(d, key_path):
    """Safely get a nested value from a dictionary."""
    current_value = d
    for key in key_path.split('.'):
        if isinstance(current_value, dict) and key in current_value:
            current_value = current_value[key]
        else:
            return None
    return current_value

# Define search criteria
search_criteria = {
    'job_status': 'Success',  # Top-level key
    'other_keys.ingestion_type': 'dual'  # Nested key
}

# Filter the list of dictionaries based on nested criteria
filtered_dictionaries = [
    d for d in jobdetails_Collection_Filtered_dict
    if all(get_nested_value(d, key) == value for key, value in search_criteria.items())
]

# Output the filtered dictionaries
print(filtered_dictionaries)


========================
filter dict ingestion type
===========================

# Example list of dictionaries (constructed based on the image's structure)
jobdetails_Collection_Filtered_dict = [
    {'job_status': 'Success', 'ingestion_type': 'dual', 'details': {'audit_run_id': 123}},
    {'job_status': 'Success', 'ingestion_type': 'single', 'details': {'audit_run_id': 456}},
    {'job_status': 'Failure', 'ingestion_type': 'dual', 'details': {'audit_run_id': 789}}
]

# Define the search criteria for top-level keys
search_criteria = {'job_status': 'Success', 'ingestion_type': 'dual'}

# Filtered list of dictionaries based on criteria
filtered_dictionaries = [
    d for d in jobdetails_Collection_Filtered_dict
    if all(d.get(key) == value for key, value in search_criteria.items())
]

# Print the filtered dictionaries
for entry in filtered_dictionaries:
    print(entry)
==========
NESTED 
======

def get_nested_value(d, key_path):
    keys = key_path.split('.')
    current = d
    for key in keys:
        if isinstance(current, dict) and key in current:
            current = current[key]
        else:
            return None

search_criteria = {
    'job_status': 'Success',
    'ingestion_type': 'dual',
    'details.audit_run_id': 123
}

jobdetails_Collection_Filtered_dict = [
    {'job_status': 'Success', 'ingestion_type': 'dual', 'details': {'audit_run_id': 123}},
    {'job_status': 'Success', 'ingestion_type': 'single', 'details': {'audit_run_id': 456}},
    {'job_status': 'Failure', 'ingestion_type': 'dual', 'details': {'audit_run_id': 789}}
]

filtered_dictionaries = [
    d for d in jobdetails_Collection_Filtered_dict
    if all(get_nested_value(d, key) == value for key, value in search_criteria.items())
]

for entry in filtered_dictionaries:
    print(entry)


