val windowSpec = Window
  .partitionBy(
    sum(
      when($"flag" === 1 && lag("flag", 1, 0).over(Window.orderBy("unique_id")) === 0, 1)
      .otherwise(0)
    ).over(Window.orderBy("unique_id"))
  )
  .orderBy("unique_id")

// Change 1: Replace lead with lag since you want to look at previous records
.withColumn( colName = "next_line", lag(columnName = "line", offset = 1).over(windowSpec))
.withColumn( colName = "next_flag", lag(columnName = "flag", offset = 1).over(windowSpec))

// Change 2: Add partitioning to windowSpec to group consecutive flag=1 rows
val windowSpec = Window.partitionBy(
    // Create groups for consecutive flag=1 records
    sum(when($"flag" === 1 && lag("flag", 1, 0).over(Window.orderBy("unique_id")) === 0, 1)
        .otherwise(0)).over(Window.orderBy("unique_id"))
  ).orderBy("unique_id")

// Change 3: Modify the combination logic
.withColumn(
    colName = "combined_line",
    when($"flag" === 1 && $"next_flag" === 1, concat($"line", $"next_line"))
    .when($"flag" === 1 && $"next_flag" =!= 1, concat($"line", " [INVALID]"))
    .otherwise($"line")
)
