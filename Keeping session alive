import java.time.format.{DateTimeFormatter, DateTimeParseException}
import java.time.{Year, YearMonth}

def isValidDate(value: String, format: String): Boolean = {
  try {
    val currentYear = Year.now().getValue // Get the current year
    val formatter = DateTimeFormatter.ofPattern(format)

    format match {
      case "yyyy" =>
        val year = Year.parse(value, formatter)
        year.getValue >= 1900 && year.getValue <= currentYear
      case _ if format.contains("yyyy") =>
        val yearMonth = YearMonth.parse(value, formatter)
        yearMonth.getYear >= 1900 && yearMonth.getYear <= currentYear
      case _ =>
        LocalDate.parse(value, formatter)
        true // For full dates, we assume the year range is valid if parsing succeeds
    }
  } catch {
    case _: DateTimeParseException => false // If parsing fails, return false
  }
}

val result = isValidDate("2024", "yyyy")
println(result) // Should print 'true' if the current year is 2024 or later
