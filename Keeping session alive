import pandas as pd

class DataFrameManager:
    def __init__(self, df):
        self.df = df

    # Read: Return the DataFrame or a slice of it
    def read(self, row_idx=None, col_idx=None):
        if row_idx is not None and col_idx is not None:
            return self.df.iloc[row_idx, col_idx]
        elif row_idx is not None:
            return self.df.iloc[row_idx]
        else:
            return self.df

    # Update: Update a specific value in the DataFrame
    def update(self, row_idx, col_idx, value):
        self.df.iloc[row_idx, col_idx] = value

    # Delete: Delete rows based on row index or column based on column name
    def delete(self, row_idx=None, col_name=None):
        if row_idx is not None:
            self.df.drop(index=row_idx, inplace=True)
        if col_name is not None:
            self.df.drop(columns=col_name, inplace=True)

# Sample data
data = [
    {'Name': 'John', 'Age': 28, 'City': 'New York'},
    {'Name': 'Anna', 'Age': 22, 'City': 'London'},
    {'Name': 'Mike', 'Age': 32, 'City': 'San Francisco'}
]
df = pd.DataFrame(data)

# Sort the DataFrame
sorted_df = df.sort_values(by=['Name', 'Age'])
manager = DataFrameManager(sorted_df)

# Read operations
print(manager.read())  # Read the entire DataFrame
print(manager.read(row_idx=1))  # Read the second row

# Update operation
manager.update(1, 1, 25)  # Update the age of the person in the second row
print(manager.read())

# Delete operation
manager.delete(row_idx=0)  # Delete the first row
print(manager.read())
