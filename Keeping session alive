cd /path/to/framework_dq_materiality/
zip -r framework_dq_materiality.zip * 
cd C:\path\to\framework_dq_materiality
Compress-Archive -Path * -DestinationPath framework_dq_materiality.zip
pyspark --py-files /path/to/framework_dq_materiality.zip
# Test importing load_config from common
from common import load_config

# Load the configuration file
config = load_config("config/framework.conf")
print("Loaded Configuration:", config)

from common.utils import load_config
from common.log import get_logger

logger = get_logger("PySparkTestLogger")

config_file_path = "config/framework.conf"
config_data = load_config(config_file_path)
logger.info(f"Configuration Loaded: {config_data}")

Get-ChildItem *.zip


import sys
import os

# Append the path of the ZIP file to PYTHONPATH
zip_file_path = "framework_dq_materiality.zip"
sys.path.append(os.path.abspath(zip_file_path))

# Verify the path is added
print(sys.path)

===
# Initialize the logger
logger = get_logger("TestLogger")
logger.info("Logger initialized successfully.")

# Load the configuration
config_file_path = "config/framework.conf"
config = load_config(config_file_path)
logger.info(f"Loaded Config: {config}")
==========

def get_sample_dict():
    """
    Returns a sample dictionary for testing.
    """
    return {"key1": "value1", "key2": "value2", "key3": "value3"}
from .sample_data import get_sample_dict

========================

import configparser
import os

def load_config(config_file_path):
    """
    Reads a framework configuration file and returns all sections and key-value pairs as a nested dictionary.
    """
    try:
        # Check if the file exists in the current directory (Spark uploads it here)
        if not os.path.exists(config_file_path):
            logger.error(f"Configuration file not found: {config_file_path}")
            raise FileNotFoundError(f"Configuration file not found: {config_file_path}")

        logger.info(f"Loading configuration from: {config_file_path}")

        # Load the configuration file
        config = configparser.ConfigParser(interpolation=None)
        config.read(config_file_path)

        # Convert to a dictionary
        config_dict = {section: dict(config.items(section)) for section in config.sections()}
        logger.info("Configuration loaded successfully.")
        return config_dict

    except Exception as e:
        logger.error(f"Error loading configuration: {e}")
        raise RuntimeError("Failed to load configuration") from e
