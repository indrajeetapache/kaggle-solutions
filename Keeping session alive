def _get_target_features(df, target_columns):
    """Get relevant profiling features for target columns with case-insensitive matching."""
    
    # Base profiling metrics (universal for int/string)
    base_suffixes = ['_Mean', '_StandardDeviation', '_ApproxQuantiles', '_CountDistinct']
    
    # Create case-insensitive column lookup
    col_lookup = {col.lower(): col for col in df.columns}
    
    features = []
    
    for base_col in target_columns:
        base_lower = base_col.lower()
        
        # Find matching columns with met_value suffix
        matching_cols = [
            actual_col for lower_col, actual_col in col_lookup.items()
            if lower_col.startswith(base_lower) and lower_col.endswith('_met_value')
        ]
        
        # Extract profiling features for each matching column
        for col in matching_cols:
            # Remove _met_value suffix to get base name
            col_base = col[:-10]  # Remove '_met_value'
            
            # Check for base profiling metrics
            for suffix in base_suffixes:
                feature_name = f"{col_base}{suffix}_met_value"
                if feature_name.lower() in col_lookup:
                    features.append(col_lookup[feature_name.lower()])
    
    # Remove duplicates while preserving order
    seen = set()
    unique_features = []
    for f in features:
        if f not in seen:
            seen.add(f)
            unique_features.append(f)
    
    print(f"Selected {len(unique_features)} profiling features:")
    for feature in unique_features:
        print(f"  - {feature}")
    
    return unique_features
