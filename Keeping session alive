# Unpack 'other_keys' into separate columns directly within the DataFrame
df = df.join(df['other_keys'].apply(pd.Series))

# Optionally, you can drop the original 'other_keys' column if it's no longer needed
df.drop('other_keys', axis=1, inplace=True)

print(df)

# Further flatten nested dictionaries like 'reconciliation_metrics'
df = df.join(df['reconciliation_metrics'].apply(pd.Series))

# Remove the now redundant 'reconciliation_metrics' column
df.drop('reconciliation_metrics', axis=1, inplace=True)

print(df)

===
import pandas as pd

# Assuming df1 and df2 are your DataFrames and both have a column named 'reconciliation_metrics'

# Exploding the 'reconciliation_metrics' column in both DataFrames
df1_exploded = df1.explode('reconciliation_metrics')
df2_exploded = df2.explode('reconciliation_metrics')

# Extract 'audit_run_id' and 'tgt_rec_count' from the dictionaries in the exploded DataFrames
df1_exploded['audit_run_id'] = df1_exploded['reconciliation_metrics'].apply(lambda x: x.get('audit_run_id'))
df1_exploded['tgt_rec_count'] = df1_exploded['reconciliation_metrics'].apply(lambda x: x.get('tgt_rec_count'))

df2_exploded['audit_run_id'] = df2_exploded['reconciliation_metrics'].apply(lambda x: x.get('audit_run_id'))
df2_exploded['tgt_rec_count'] = df2_exploded['reconciliation_metrics'].apply(lambda x: x.get('tgt_rec_count'))
