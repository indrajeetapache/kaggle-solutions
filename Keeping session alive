import java.security.MessageDigest
import org.apache.spark.input.PortableDataStream

// Assuming spark-shell, SparkContext is available as 'sc'
val hdfsPath = "hdfs://path/to/your/files" // Update this path

// Define the computeMD5 function correctly within the same scope
def computeMD5(pds: PortableDataStream): String = {
  val md = MessageDigest.getInstance("MD5")
  val buffer = new Array[Byte](1024)
  val inStream = pds.open()
  try {
    var read = inStream.read(buffer)
    while (read != -1) {
      md.update(buffer, 0, read)
      read = inStream.read(buffer)
    }
    md.digest().map("%02x".format(_)).mkString
  } finally {
    inStream.close()
  }
}

// Use sc.binaryFiles to read files and compute MD5 hashes
val fileHashes = sc.binaryFiles(hdfsPath)
                   .map { case (path, pds) => (path, computeMD5(pds)) }
                   .collect()
